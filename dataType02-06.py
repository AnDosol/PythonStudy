# 집합자료형
'''
# set() : 리스트를 넣거나 문자열을 입력하여 만들어도 된다.
s1 = set([1, 2, 3])
print(s1)

#set의 특징
#1. 중복을 허용하지 않는다. -> 중복제거를 위해 쓰이기도 한다.
#2. 순서가 없다
s2 = set("Hello")
print(s2)
'''

# 리스트와 튜플은 순서가 있기 때문에 인덱싱을 이용하여 자료형의 값을 얻을 수 있다.
'''
# set,dictionary는 순서가 없기 때문에 인덱싱을 이용할수 없다.
# 튜플이나 리스트로 변환해야 인덱싱을 이용가능하다
s1 = set([1, 2, 3])
l1 = list(s1)
print("l1 : " + str(l1))
print("l1[1] : " + str(l1[1]))

t1 = tuple(s1)
print("t1 : " + str(t1))
print("t1 : " + str(t1[0]))

# set은 인덱싱이 불가능하다
# print=s1[0]
'''

# set은 교집합, 합집합, 차집합을 구핼 때 유리하다
'''
s1 = set([1, 2, 3, 4, 5, 6])
s2 = set([4, 5, 6, 7, 8, 9])
# 1.교집합
print("교집합 : " + str(s1 & s2))
print("교집합 : " + str(s1.intersection(s2)))

# 2. 합집합
print("합집합 : " + str(s1 | s2))
print("합집합 : " + str(s1.union(s2)))

# 3. 차집합
print("차집합 : " + str(s1 - s2))
print("차집합 : " + str(s2 - s1))
'''

# 값 1개 추가하기
'''
# .add()
s1 = set([1, 2, 3])
s1.add(4)
print(s1)
'''

# 값 여러개 추가하기
'''
s1 = set([1, 2, 3])
# 값을 추가할때에도 마찬가지로 중복값은 추가 되지 않는다.
s1.update([3, 4, 5, 6])
print(s1)
'''
'''
# 특정 값 제거하기
s1 = set([1, 2, 3])
s1.remove(2)
print(s1)
'''